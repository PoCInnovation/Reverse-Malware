const fs = require('fs');
var esprima = require('esprima-next');
var escodegen = require('escodegen');
const { exit, argv } = require('process');
const { bbystealsurheartwithlovebrunxkd$oth1jj, ast_oth1jj, astDef_oth1jj } = require('./ast/oth1jj');
const { ast_ukyoii } = require('./ast/ukyoii');
const { ast_r6d1qt } = require('./ast/r6d1qt');

// ######### Args #########

if (argv.length <= 2) {
    console.error("You should put the path of index.js");
    exit(1);
}

let output = true;
let printconsole = false;

for (const arg of argv) {
    if (arg[0] != '-')
        continue;
    switch (arg) {
        case '-no': // no output
            output = false;
            break;
        case '-p': // print
            printconsole = true;
            break;
    }
}

/// ######### Main #########

const fCode = fs.readFileSync(argv[2], 'utf8');
var code = esprima.parseScript(fCode, { range: true });

// Function to recursively traverse the AST
function traverse(node, callback, currentScope = {parentScope: {scope: 0}, scope: 0}) {
    if (node.type === 'FunctionDeclaration') {
        currentScope = { parentScope: currentScope, scope: currentScope.scope + 1 };
    } if (node.type === 'VariableDeclaration') {
        for (const decl of node.declarations) {
            if (!decl.init)
                continue;
            if (decl.init.type === 'CallExpression' || decl.init.type === 'FunctionDeclaration') {
                currentScope = { parentScope: currentScope, scope: currentScope.scope + 1 };
                break;
            }
        }
    }
    for (let key in node) {
        if (key === 'parent')
            continue;
        if (node.hasOwnProperty(key)) {
            let child = node[key];
            if (child && typeof child === 'object') {
                if (Array.isArray(child)) {
                    child.forEach(function(arrchild) {
                        arrchild.parent = node;
                        traverse(arrchild, callback, currentScope);
                    });
                } else {
                    child.parent = node;
                    traverse(child, callback, currentScope);
                }
            }
        }
    }

    // clean scope functions :
    // even if the list is zero, it shouldn't crash since it must be defined in the scope
    while (bbystealsurheartwithlovebrunxkd$oth1jj.length > 0
        && bbystealsurheartwithlovebrunxkd$oth1jj[0].scope > currentScope.scope) {
        bbystealsurheartwithlovebrunxkd$oth1jj.shift();
    }

    node = callback(node, currentScope); // Evaluate children before
}

// Traverse the AST and find function declarations and replace them by their output
function traverseCallback(node, currentScope) {
    if (node.type === 'CallExpression') {
        if (node.callee) {
            if (node.callee.name === 'bbystealsurheartwithlovebrunxkd$ukyoii') {
                return ast_ukyoii(node);
            } else if (node.callee.name === 'bbystealsurheartwithlovebrunxkd$oth1jj') {
                return ast_oth1jj(node);
            } else if (node.callee.type === 'MemberExpression') {
                if (node.callee.object.name === 'bbystealsurheartwithlovebrunxkd$r6d1qt') {
                    return ast_r6d1qt(node);
                }
            }
        }
    } else if (node.type == 'VariableDeclaration') { // here we change definitons of scoped functions
        for (const decl of node.declarations) {
            if (decl.id.name === 'bbystealsurheartwithlovebrunxkd$oth1jj' && decl.init) {
                const value = decl.init.callee.body.body[0].argument.body.body[0].argument;
                if (value.callee) {
                    astDef_oth1jj(value, 1, currentScope.scope)
                } else {
                    astDef_oth1jj(value.property.right, 0, currentScope.scope)
                }
                return node;
            }
        }
    }
    return node
}

traverse(code, traverseCallback);

if (output) {
    const res = escodegen.generate(code);
    if (printconsole) {
        console.log(res);
    } else {
        fs.writeFile("./output/index_deob.js", res, function(err) {
            if(err) {
                return console.log(err);
            }
            console.log("The file was saved! : ./output/index_deob.js");
        });
    }
}

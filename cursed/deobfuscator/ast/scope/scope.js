// The current scope is always scope[0]
// scope [{'name' : 'content', 'othername': 'othercontent'}]

const ScopeType = {
    None: 0,
    Function: 1,
    Block: 2
}

class Scope {
    constructor() {
        this.depth = 0;
        this.scope = [{}];
    }

    getElementFromScope(name) {
        for (let i = 0; i < this.scope.length; i++) {
            if (name in this.scope[i])
                return this.scope[i][name];
        }
        return null;
    }

    setElementInScope(name, content) {
        this.scope[0][name] = content;
    }

    inc(type) {
        switch (type) {
            case ScopeType.Function:
                break;
            case ScopeType.Block:
                break;
        }
        this.depth++;
        this.scope.unshift({})
    }

    dec(type) {
        if (this.depth <= 0)
            return;
        this.depth--;
        this.scope.shift()
    }

    getCurScope() {
        return this.depth;
    }

    isNodeBlock(node) {
        if (node.type === 'FunctionDeclaration') {
            return ScopeType.Function;
        } else if (node.type === 'VariableDeclaration') {
            for (const decl of node.declarations) {
                if (!decl.init)
                    continue;
                if (decl.init.type === 'CallExpression' || decl.init.type === 'FunctionDeclaration') {
                    return ScopeType.Function;
                }
            }
        }
        return ScopeType.None;
    }
};

module.exports = { Scope };

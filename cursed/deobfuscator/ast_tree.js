const { Scope } = require('./ast/scope/scope');

var scope = new Scope();

// Function to recursively traverse the AST
function traverse(node, callback) {
    const scopeType = scope.isNodeBlock(node)
    if (scopeType) {
        scope.inc(scopeType);
    }

    // Go inside node content

    for (let key in node) {
        if (key === 'parent')
            continue;
        if (node.hasOwnProperty(key)) {
            let child = node[key];
            if (child && typeof child === 'object') {
                if (Array.isArray(child)) {
                    child.forEach(function(arrchild) {
                        arrchild.parent = node;
                        traverse(arrchild, callback);
                    });
                } else {
                    child.parent = node;
                    traverse(child, callback);
                }
            }
        }
    }

    // clean scope functions :
    // even if the list is zero, it shouldn't crash since it must be defined in the scope
    if (scopeType) {
        scope.dec(scopeType);
    }

    node = callback(node, scope); // Evaluate children before
}

module.exports = { traverse };

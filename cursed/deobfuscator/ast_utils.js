function UnaryExpressionToValue(expression) {
    switch (expression.operator) {
        case '+':
            return +expression.argument.value; // Unary plus operator
        case '-':
            return -expression.argument.value; // Unary minus operator
        // Handle other unary operators here
        default:
            console.error('Unsupported unary operator:', expression.operator);
            return 0;
    }
}

function numberToNode(node, val) {
    if (val < 0) {
        node.type = 'UnaryExpression';
        node.operator = '-';
        node.argument = { type: 'Literal', value: -val, raw: (-val).toString(), range: rawArg.argument.range },
        node.prefix = rawArg.prefix;
    } else {
        node.type = 'Literal';
        node.value = val;
        node.raw = val.toString();
    }
    return node;
}

function getValueArg(arg) {
    switch (arg.type) {
        case 'Literal':
            return arg.value;
        case 'UnaryExpression':
            return UnaryExpressionToValue(arg)
        default:
            return null;
    }
}

function valueToNode(ogNode, value) {
    if (!isNaN(value) && value != null) { //
        return numberToNode(ogNode, value);
    } else {
        return ogNode;
    }
}

module.exports = { UnaryExpressionToValue, numberToNode, getValueArg, valueToNode }

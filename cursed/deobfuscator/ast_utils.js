function UnaryExpressionToValue(expression) {
    switch (expression.operator) {
        case '+':
            return +expression.argument.value; // Unary plus operator
        case '-':
            return -expression.argument.value; // Unary minus operator
        // Handle other unary operators here
        default:
            console.error('Unsupported unary operator:', expression.operator);
            return 0;
    }
}

function getValueArg(arg) {
    switch (arg.type) {
        case 'Literal':
            return arg.value;
        case 'UnaryExpression':
            return UnaryExpressionToValue(arg)
        default:
            return null;
    }
}

// ognode is the ptr of the node, we change it from here
function valueToNode(ognode, value) {
    if (typeof value === 'number') {
        if (value < 0) {
                ognode.type = 'UnaryExpression';
                ognode.operator = '-';
                ognode.argument = {
                    type: 'Literal',
                    value: Math.abs(value),
                    raw: Math.abs(value).toString()
                };
                ognode.prefix = true;
        } else {
            ognode.type = 'Literal';
            ognode.value = value;
            ognode.raw = value.toString();
        }
    } else if (typeof value === 'string') {
        ognode.type = 'Literal';
        ognode.value = value;
        ognode.raw = JSON.stringify(value);
    } else if (typeof value === 'boolean') {
        ognode.type = 'Literal';
        ognode.value = value;
        ognode.raw = value.toString();
    } else if (value === null) {
        ognode.type = 'Literal';
        ognode.value = null;
        ognode.raw = 'null';
    } else if (Array.isArray(value)) {
        const elements = value.map(element => valueToNode({'parent': ognode}, element));
        ognode.type = 'ArrayExpression';
        ognode.elements = elements;
    } else if (value === undefined) {
        ognode.type = 'Identifier';
        ognode.name = 'undefined';
    } else if (typeof value === 'object') {
        // Handling object properties is more complex
        // console.error('Objects are not handled in this example');
        return ognode;
    } else {
        console.error(`Unsupported value type: ${typeof value}`);
        return ognode;
    }
    return ognode;
}

module.exports = { UnaryExpressionToValue, getValueArg, valueToNode }

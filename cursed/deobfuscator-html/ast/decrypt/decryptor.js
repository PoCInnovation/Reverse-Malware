const { UnaryExpressionToValue, valueToNode } = require("../../ast_utils");

const ast_decryptType = {
	MemberExpression: 0,
	RegularCall: 1,
}

function ast_decryptor(node, func, type) {
    let arg;
    switch (type) {
        case ast_decryptType.MemberExpression: // (this, [value])
            arg = node.arguments[1];
            break;
        case ast_decryptType.RegularCall:
            arg = node.arguments[0]; // (value)
            break;
    }
    let value = null;
    switch (arg.type) {
        case 'ArrayExpression':
            value = arg.elements[0];
            switch (value.type) {
                case 'Literal':
                    value = value.value;
                    break;
                case 'UnaryExpression':
                    value = UnaryExpressionToValue(value);
                    break;
                default:
                    // call expression that are not yet evaluated
                    // console.error(value.type);
                    return node;
            }
            break;
        case 'Literal':
            value = arg.value;
            break;
        case 'UnaryExpression':
            value = UnaryExpressionToValue(arg);
            break;
        default:
            // TODO : complete other expressions (many evaluated before)
            // console.error(arg.type);
            return node;
    }
    try {
        var res = func(value);
    } catch (e) { // the decryption might not work, TODO : find out why
        return node;
    }
    let resNode = valueToNode(node, res);
    if (!resNode)
        return node;

    return resNode;
}

module.exports = { ast_decryptor, ast_decryptType }

const { getValueArg } = require("../../ast_utils");
const { ast_decryptFuncs } = require("../../vars/ast_vars");
const { ast_staticIndexes } = require("../indexers/funcs");

// proxy functions are functions that isn't defined, but points
// to another function defined before.
// this prevents the deobfuscator to output the function.

////// V1 Proxy //////

function handleDefProxies(funcName, node, scope, declaration) {
    let proxyValue = getValueArg(node.arguments[0].right);
    if (proxyValue == null)
        return;

    if (node.arguments[0].operator === '-')
        proxyValue = -proxyValue;
    const scopedFunc = scope.getElementFromScope(node.callee.name)
    if (scopedFunc == null)
        return;

    scope.setElementInScope(funcName, function(val) {
        return scopedFunc(val + proxyValue);
    }, declaration);
}

////// V2 Proxy : //////

function isVarProxy(name, scope) {
    for (const func of ast_staticIndexes) { // 623s27, etc...
        if (func.name === name) {
            return func.name;
        }
    }
    for (const func of ast_decryptFuncs) {
        if (func.name === name) {
            return func.name;
        }
    }
    const scopeName = scope.getElementFromScope(name);
    if (scopeName && typeof(scopeName) === 'string' && scopeName.slice(0, 3) === 'pr_')
        return scopeName.slice(3);
    return null;
}

// this function handle these type of lines :
// const bbystealsurheartwithlovebrunxkd$vc5p9j = bbystealsurheartwithlovebrunxkd$w2ct6j;
function handleVarProxy(node, scope) {
    const name = node.id.name;
    const proxyName = isVarProxy(node.init.name, scope);
    if (proxyName == null) {
        return false;
    }
    scope.setElementInScope(name, 'pr_' + proxyName, node);
    return true;
}

// node should be an Identifier
function handleAssignementProxy(node, scope) {
    const name = node.name;
    const proxyName = isVarProxy(node.name, scope);
    if (proxyName == null) {
        return false;
    }
    scope.setElementInScope(name, 'pr_' + proxyName, node);
    return true;
}

function getTrueName(name, scope) {
    const res = scope.getElementFromScope(name);
    if (typeof(res) !== "string")
        return name;
    if (res.substring(0, 3) === 'pr_') // means it's a detected proxy !
        return res.slice(3);
    return name;
}

module.exports = { handleDefProxies, handleVarProxy, handleAssignementProxy, getTrueName};

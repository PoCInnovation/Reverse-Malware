const { evalBinaryExpression, valueToNode } = require("../../ast_utils");
var escodegen = require('escodegen');


function getValueExpr(node) {
    if (node.type === 'MemberExpression') {
        return evalBinaryExpression(node.property);
    } else {
        return evalBinaryExpression(node);
    }
}

// typeof (bbystealsurheartwithlovebrunxkd$sbzfdo = 's.sqli', bbystealsurheartwithlovebrunxkd$oth1jj = 'cookie', bbystealsurheartwithlovebrunxkd$js15qs = 'sqlite', bbystealsurheartwithlovebrunxkd$te6clf = 'story.', bbystealsurheartwithlovebrunxkd$ige25 = 'formhi', bbystealsurheartwithlovebrunxkd$orvr1h = '.json', bbystealsurheartwithlovebrunxkd$sl809 = 'logins', bbystealsurheartwithlovebrunxkd$thmuis = 'Cookie', bbystealsurheartwithlovebrunxkd$1t5ts = 'Web Da', bbystealsurheartwithlovebrunxkd$g00k96 = 'Data', bbystealsurheartwithlovebrunxkd$dlyiu9 = 'Login ');
function initExpression(node, scope) {
    if (!node.expression.argument || node.expression.type !== 'UnaryExpression')
        return node;

    var array = [];
    // console.log(escodegen.generate(node))
    const firstElement = node.expression.argument.expressions[0];
    if (firstElement && firstElement.type === 'AssignmentExpression' && firstElement.left.property && firstElement.left.property.name === 'length') {
        let name;
        if (firstElement.left.type === 'Identifier') {
            name = firstElement.left.name;
        } else {
            name = firstElement.left.object.name;
        }
        scope.setElementInScope(name, array, node);
    } else {
        // console.log(node)
    }
    return node;
}

function applyToNodePointer(source, destination) {
    // Clear (remove) all existing keys from the destination object
    for (const key in destination) {
        if (destination.hasOwnProperty(key)) {
            delete destination[key];
        }
    }

    // Copy keys from the source object to the destination object
    for (const key in source) {
        if (source.hasOwnProperty(key)) {
            destination[key] = source[key];
        }
    }
}

module.exports = { initExpression, applyToNodePointer, getValueExpr }
